# Each new term in the Fibonacci sequence is generated by adding the previous two
# terms. By starting with 1 and 2, the first 10 terms will be:
###1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed
# four million, find the sum of the even-valued terms.
###

# A brute force method is to store all numbers in a list
# Either recursive or iterative

################
# Recursive
################

evenFibs = []


def fib(n):
    if n == 1 or n == 0:
        return 1
    else:
        return fib(n - 2) + fib(n - 1)


count = 1
while fib(count) < 4000000:
    if fib(count) % 2 == 0:
        evenFibs.append(fib(count))
    count += 1

sum = 0
for i in evenFibs:
    sum += i

print(sum)
#####################################################
# Iterative Solution (Better)
#####################################################

def fib_even(n):
    sum = 0
    a = 1
    b = 1
    while b < n:
        if b % 2 == 0:
            sum += b
        h = a + b
        a = b
        b = h
    return sum


print(fib_even(4000000))
